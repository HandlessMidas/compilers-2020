-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = {
        
        fun textOp (l, op, r) {
          Binop (op, l, r)
        }
        local ops = map (
          fun ([assoc, opReprs]) {
            [assoc, map (
              fun (opRepr) { [s(opRepr), textOp] },
              opReprs
            )]
          },
          {
            [Left, "!!" : {}],
            [Left, "&&" : {}],
            [Nona, {"==", "!=", "<", "<=", ">", ">="}],
            [Left, {"+", "-"}],
            [Left, {"*", "/", "%"}]
          }
        );

        memo $ eta expr (ops, primary)
      };

local ifNoKw = memo $ eta syntax (
  cond=exp kThen thn=stmt els=(
    -kElse stmt -kFi     |
    -kElif ifNoKw        |
    kFi { Skip }
  ) { If (cond, thn, els) }
);

local simpleStmt = memo $ eta syntax (
  kRead id=inbr[s("("), lident, s(")")] { Read (id) }      |
  kWrite e=inbr[s("("), exp, s(")")] { Write (e) }         |
  kSkip { Skip }                                           |
  id=lident s[":="] e=exp { Assn (id, e) }                 |
  -kIf ifNoKw                                              |
  kWhile cond=exp kDo body=stmt kOd { While (cond, body) } |
  kFor init=stmt s[","] cond=exp s[","] step=stmt kDo body=stmt kOd
    { Seq (init, While (cond, Seq (body, step))) }         |
  kRepeat body=stmt kUntil cond=exp { Repeat (body, cond) }         
);

local stmt = memo $ eta syntax (
  s1=simpleStmt s[";"] s2=stmt { Seq (s1, s2) } |
  simpleStmt
);
   
-- Public top-level parser
public parse = stmt;
