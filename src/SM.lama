-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c, insns) {
  case insns of
    {}             -> c
  | ins : insns    -> case c of [stack, state, world] ->
      case ins of
        CONST (n)  -> [n : stack, state, world]
      | BINOP (op) -> case stack of v1 : v2 : vs -> [opFun (op) (v1, v2) : vs, state, world] esac
      | LD (x)     -> [state (x) : stack, state, world]
      | ST (x)     -> case stack of v : vs -> [vs, state <- [x, v], world] esac
      | READ       -> case readWorld (world) of [v, world1] -> [v : stack, state, world1] esac
      | WRITE      -> case stack of v : vs -> [vs, state, writeWorld (v, world)] esac
      esac.eval (insns)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
    case (expr) of 
      Var   (x)          -> LD    (x)
    | Const (n)        -> CONST (n)
    | Binop (op, l, r) -> { compileExpr (r), compileExpr (l), BINOP (op) }
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  deepFlatten (    
    case stmt of
      Read (v)         -> {READ, ST (v)}
    | Write (expr)     -> {compileExpr (expr), WRITE}
    | Assn (v, expr)   -> {compileExpr (expr), ST (v)}
    | Seq (seq1, seq2) -> {compileImpl (seq1), compileImpl (seq2)}
    esac)
}
